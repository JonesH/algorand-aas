"""Test VC CLI commands.

Tests for Verifiable Credentials command-line interface functionality.
Following TDD: These tests should FAIL initially until implementation.
"""

from __future__ import annotations

import json
import tempfile
from pathlib import Path

import pytest
from typer.testing import CliRunner

# Import CLI modules that don't exist yet - will cause ImportError initially
from aas.cli.vc_commands import app as vc_app


@pytest.fixture
def cli_runner():
    """CLI test runner."""
    return CliRunner()


@pytest.fixture
def temp_dir():
    """Temporary directory for test files."""
    with tempfile.TemporaryDirectory() as tmpdir:
        yield Path(tmpdir)


@pytest.fixture
def sample_claim_file(temp_dir: Path):
    """Sample claim JSON file."""
    claim_data = {
        "name": "Alice Smith",
        "email": "alice@example.com",
        "credential_type": "IdentityVerification"
    }
    
    claim_file = temp_dir / "claim.json"
    claim_file.write_text(json.dumps(claim_data, indent=2))
    return claim_file


@pytest.fixture
def sample_key_file(temp_dir: Path):
    """Sample private key file."""
    # This would be generated by did keygen in real usage
    key_file = temp_dir / "issuer.key"
    key_file.write_text("mock_private_key_content")
    return key_file


def test_vc_issue_command(cli_runner: CliRunner, sample_claim_file: Path, sample_key_file: Path):
    """Test VC issuance command."""
    issuer_did = "did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK"
    subject_did = "did:key:z6MkfrQREaHn7i6Rx1M4xr37KVnSuYDvtGbgqrJvd8j7NRgN"
    
    result = cli_runner.invoke(vc_app, [
        "issue",
        str(sample_claim_file),
        "--issuer-did", issuer_did,
        "--subject-did", subject_did,
        "--key-file", str(sample_key_file)
    ])
    
    assert result.exit_code == 0
    
    # Should output JWT VC
    output = result.stdout.strip()
    assert output.count('.') == 2  # Valid JWT format


def test_vc_issue_with_schema(cli_runner: CliRunner, sample_claim_file: Path, sample_key_file: Path):
    """Test VC issuance with schema reference."""
    issuer_did = "did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK"
    subject_did = "did:key:z6MkfrQREaHn7i6Rx1M4xr37KVnSuYDvtGbgqrJvd8j7NRgN"
    schema_id = "identity.verification.v1"
    
    result = cli_runner.invoke(vc_app, [
        "issue",
        str(sample_claim_file),
        "--issuer-did", issuer_did,
        "--subject-did", subject_did,
        "--key-file", str(sample_key_file),
        "--schema-id", schema_id
    ])
    
    assert result.exit_code == 0
    assert "VC issued successfully" in result.stdout or result.stdout.count('.') == 2


def test_vc_verify_command(cli_runner: CliRunner, temp_dir: Path):
    """Test VC verification command."""
    # Mock JWT VC for testing
    jwt_vc = "eyJ0eXAiOiJKV1QiLCJhbGciOiJFZERTQSJ9.eyJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSJdLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIl0sImlzc3VlciI6ImRpZDprZXk6ejZNa2hhWGdCWkR2b3RES0w1MjU3ZmFpenRpR2lDMlF0S0xHcGJubkVHdGEyZG9LIiwiY3JlZGVudGlhbFN1YmplY3QiOnsiaWQiOiJkaWQ6a2V5Ono2TWtmclFSRWFIbjdpNlJ4MU00eHIzN0tWblN1WUR2dEdiZ3FySnZkOGo3TlJnTiIsIm5hbWUiOiJBbGljZSBTbWl0aCIsImVtYWlsIjoiYWxpY2VAZXhhbXBsZS5jb20iLCJjcmVkZW50aWFsX3R5cGUiOiJJZGVudGl0eVZlcmlmaWNhdGlvbiJ9fSwiaXNzIjoiZGlkOmtleTp6Nk1raGFYZ0JaRHZvdERLTDUyNTdmYWl6dGlHaUMyUXRLTEdwYm5uRUd0YTJkb0siLCJzdWIiOiJkaWQ6a2V5Ono2TWtmclFSRWFIbjdpNlJ4MU00eHIzN0tWblN1WUR2dEdiZ3FySnZkOGo3TlJnTiIsImlhdCI6MTcwNTA2NzE2NC4wNDI5MDUsImp0aSI6ImFCYzEyM0VmZ0gifQ.mock_signature"
    
    vc_file = temp_dir / "test.vc.jwt"
    vc_file.write_text(jwt_vc)
    
    result = cli_runner.invoke(vc_app, [
        "verify",
        str(vc_file)
    ])
    
    # Should attempt verification (may fail due to mock signature)
    assert result.exit_code == 0 or "signature" in result.stdout.lower()


def test_vc_verify_with_issuer(cli_runner: CliRunner, temp_dir: Path):
    """Test VC verification with issuer DID."""
    jwt_vc = "mock.jwt.vc"
    vc_file = temp_dir / "test.vc.jwt"
    vc_file.write_text(jwt_vc)
    
    issuer_did = "did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK"
    
    result = cli_runner.invoke(vc_app, [
        "verify",
        str(vc_file),
        "--issuer-did", issuer_did
    ])
    
    # Should process the command even if verification fails
    assert "error" in result.stdout.lower() or result.exit_code != 0


def test_vc_revoke_command(cli_runner: CliRunner, sample_key_file: Path, temp_dir: Path):
    """Test VC revocation command."""
    attestation_id = "test_attestation_id_12345"
    
    # Create a real JWT VC for testing
    vc_file = temp_dir / "test.vc.jwt"
    jwt_vc = _create_test_jwt_vc()
    vc_file.write_text(jwt_vc)
    
    result = cli_runner.invoke(vc_app, [
        "revoke",
        attestation_id,
        "--vc-file", str(vc_file),
        "--key-file", str(sample_key_file),
        "--reason", "42"
    ])
    
    assert result.exit_code == 0
    assert "revoked" in result.stdout.lower() or "success" in result.stdout.lower()


def test_vc_status_command(cli_runner: CliRunner, temp_dir: Path):
    """Test VC status check command."""
    attestation_id = "test_attestation_id_67890"
    
    # Create a real JWT VC for testing
    vc_file = temp_dir / "test.vc.jwt"
    jwt_vc = _create_test_jwt_vc()
    vc_file.write_text(jwt_vc)
    
    result = cli_runner.invoke(vc_app, [
        "status",
        attestation_id,
        "--vc-file", str(vc_file)
    ])
    
    assert result.exit_code == 0
    assert any(status in result.stdout.lower() for status in ["active", "revoked", "suspended"])


def test_vc_anchor_command(cli_runner: CliRunner, sample_key_file: Path, temp_dir: Path):
    """Test VC anchoring to AAS command."""
    # Create a real JWT VC for testing
    vc_file = temp_dir / "test.vc.jwt"
    jwt_vc = _create_test_jwt_vc()
    vc_file.write_text(jwt_vc)
    
    schema_id = "test.schema.v1"
    subject_addr = "ALGORAND_ADDRESS_32BYTES_HERE"
    
    result = cli_runner.invoke(vc_app, [
        "anchor",
        str(vc_file),
        "--schema-id", schema_id,
        "--subject-addr", subject_addr,
        "--key-file", str(sample_key_file)
    ])
    
    assert result.exit_code == 0
    assert "anchored" in result.stdout.lower() or "attestation" in result.stdout.lower()


def test_vc_issue_and_anchor_command(cli_runner: CliRunner, sample_claim_file: Path, sample_key_file: Path):
    """Test combined VC issue and anchor command."""
    issuer_did = "did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK"
    subject_did = "did:key:z6MkfrQREaHn7i6Rx1M4xr37KVnSuYDvtGbgqrJvd8j7NRgN"
    schema_id = "test.schema.v1"
    subject_addr = "ALGORAND_ADDRESS_32BYTES_HERE"
    
    result = cli_runner.invoke(vc_app, [
        "issue-and-anchor",
        str(sample_claim_file),
        "--issuer-did", issuer_did,
        "--subject-did", subject_did,
        "--key-file", str(sample_key_file),
        "--schema-id", schema_id,
        "--subject-addr", subject_addr
    ])
    
    assert result.exit_code == 0
    assert "attestation" in result.stdout.lower()


def test_vc_help_commands(cli_runner: CliRunner):
    """Test help output for VC commands."""
    result = cli_runner.invoke(vc_app, ["--help"])
    
    assert result.exit_code == 0
    assert "issue" in result.stdout
    assert "verify" in result.stdout
    assert "revoke" in result.stdout
    assert "anchor" in result.stdout


def test_vc_invalid_claim_file_error(cli_runner: CliRunner, sample_key_file: Path):
    """Test error handling for invalid claim file."""
    result = cli_runner.invoke(vc_app, [
        "issue",
        "nonexistent_claim.json",
        "--issuer-did", "did:key:test",
        "--subject-did", "did:key:test2", 
        "--key-file", str(sample_key_file)
    ])
    
    assert result.exit_code != 0
    assert "not found" in result.stdout.lower() or "error" in result.stdout.lower()


def test_vc_invalid_did_error(cli_runner: CliRunner, sample_claim_file: Path, sample_key_file: Path):
    """Test error handling for invalid DID format."""
    result = cli_runner.invoke(vc_app, [
        "issue",
        str(sample_claim_file),
        "--issuer-did", "invalid-did-format",
        "--subject-did", "did:key:z6MkfrQREaHn7i6Rx1M4xr37KVnSuYDvtGbgqrJvd8j7NRgN",
        "--key-file", str(sample_key_file)
    ])
    
    assert result.exit_code != 0
    assert "invalid" in result.stdout.lower() or "error" in result.stdout.lower()


def test_vc_issue_with_expiration(cli_runner: CliRunner, sample_claim_file: Path, sample_key_file: Path):
    """Test VC issuance with expiration time."""
    issuer_did = "did:key:z6MkhaXgBZDvotDkL5257faiztiGiC2QtKLGpbnnEGta2doK"
    subject_did = "did:key:z6MkfrQREaHn7i6Rx1M4xr37KVnSuYDvtGbgqrJvd8j7NRgN"
    
    result = cli_runner.invoke(vc_app, [
        "issue",
        str(sample_claim_file),
        "--issuer-did", issuer_did,
        "--subject-did", subject_did,
        "--key-file", str(sample_key_file),
        "--expires-in", "3600"  # 1 hour
    ])
    
    assert result.exit_code == 0


def test_vc_parse_command(cli_runner: CliRunner, temp_dir: Path):
    """Test VC parsing command to show VC contents."""
    jwt_vc = _create_test_jwt_vc()
    vc_file = temp_dir / "test.vc.jwt"
    vc_file.write_text(jwt_vc)
    
    result = cli_runner.invoke(vc_app, [
        "parse",
        str(vc_file)
    ])
    
    assert result.exit_code == 0
    # Should output JSON content
    assert "{" in result.stdout and "}" in result.stdout


def _create_test_jwt_vc() -> str:
    """Create a real JWT VC for testing."""
    from aas.sdk.did import generate_ed25519_keypair
    from aas.sdk.vc import issue_jwt_vc
    
    # Generate test keypair
    signing_key, issuer_did = generate_ed25519_keypair()
    subject_did = "did:key:z6MkfrQREaHn7i6Rx1M4xr37KVnSuYDvtGbgqrJvd8j7NRgN"
    
    # Create test claim
    test_claim = {
        "name": "Test User",
        "email": "test@example.com", 
        "credential_type": "TestCredential"
    }
    
    # Issue real JWT VC
    return issue_jwt_vc(test_claim, issuer_did, subject_did, signing_key)